/*
    Rajesh Narayan
    narayar@whitman.edu
*//* 
 * trans.c - Matrix transpose B = A^T
 *
 * Each transpose function must have a prototype of the form:
 * void trans(int M, int N, int A[N][M], int B[M][N]);
 *
 * A transpose function is evaluated by counting the number of misses
 * on a 1KB direct mapped cache with a block size of 32 bytes.
 */ 
#include <stdio.h>
#include "cachelab.h"

int is_transpose(int M, int N, int A[N][M], int B[M][N]);

/* 
 * transpose_submit - This is the solution transpose function that you
 *     will be graded on for Part B of the assignment. Do not change
 *     the description string "Transpose submission", as the driver
 *     searches for that string to identify the transpose function to
 *     be graded. 
 */
char transpose_submit_desc[] = "Transpose submission";
void transpose_submit(int M, int N, int A[N][M], int B[M][N])
{
    
    int i, j, tmp;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            tmp = A[i][j];
            B[j][i] = tmp;
        }
    }    
}

/* 
 * You can define additional transpose functions below. We've defined
 * a simple one below to help you get started. 
 */ 

/* 
 * trans - A simple baseline transpose function, not optimized for the cache.
 */
char trans_desc[] = "Simple row-wise scan transpose";
void trans(int M, int N, int A[N][M], int B[M][N])
{
    int i, j, tmp;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            tmp = A[i][j];
            B[j][i] = tmp;
        }
    }    

}

/*
 * registerFunctions - This function registers your transpose
 *     functions with the driver.  At runtime, the driver will
 *     evaluate each of the registered functions and summarize their
 *     performance. This is a handy way to experiment with different
 *     transpose strategies.
 */
void registerFunctions()
{
    /* Register your solution function */
    registerTransFunction(transpose_submit, transpose_submit_desc); 

    /* Register any additional transpose functions */
    registerTransFunction(trans, trans_desc); 

}


void transpose64(int M, int N, int A[N][M], int B[M][N]) {

    int blocksize = 32;

    int loop = 0;

    // loop variables to pass through rows and columns 
    int i, j; 
    int i1, j1;

    // loop variables to pass through rows and columns of blocks
    int k, l; 

    // if a block's diagonal is part of the matrix's diagonal, we don't have to alter it. assign the number to a variable so that we have quick access

    int diagval, diagind; // diagonal element and diagonal index

    int tmp;

    //int tmp1, tmp2, tmp3, tmp4;
    while (loop < 4) {
        switch(loop) {
            case 0:
                i1 = 0;
                j1 = 0;
                break;
            case 1:
                i1 = 32;
                j1 = 0;
                break;
            case 2:
                j1 = 32;
                i1 = 0;
                break;
            case 3:
                j1 = 32;
                i1 = 32;
                break;
        }
        for (i = i1; i < N; i += blocksize) {
            for (j = j1; j < M; j += blocksize) {
                // transpose the block beginning at [i,j]
                for (k = i; k < i + blocksize; k++) {
                    for (l = j; l < j + blocksize; l++) {
                        if (k != l) {
                            switch (loop) {
                                case 1:
                                    tmp = A[k][l];
                                    B[l+32][k-32] = tmp;
                                    break;
                                case 2:
                                    tmp = A[k][l];
                                    B[l-32][k+32] = tmp;
                                    break;
                                case 0:
                                case 3:
                                    B[l][k] = A[k][l];
                                    break;
                            }
                        }
                        else {
                            diagval = A[k][l];
                            diagind = k;
                        }
                    }

                    if(i == j) {
                        switch (loop) {
                            case 1:
                                B[diagind+32][diagind-32] = diagval;
                                break;
                            case 2:
                                B[diagind-32][diagind+32] = diagval;
                                break;
                            case 0:
                            case 3:
                                B[diagind][diagind] = diagval;
                                break;
                        }
                    }
                }
            }
        }

        loop++;
        
        
        /*void trans64(int M, int N, int A[N][M], int B[M][N]) {
    int i, j, t1, t2, t3, t4, t5, t6, t7, t8;
   
    // Block size of 4
    for (i = 0; i < N; i += 4) {
        for (j = 0; j < M; j += 4) {
            // Read 1st & 2nd row from A
            t1 = A[i][j];
            t2 = A[i+1][j];
            t3 = A[i+2][j];
            t4 = A[i+3][j];
            t5 = A[i][j+1];
            t6 = A[i+1][j+1];
            t7 = A[i+2][j+1];
            t8 = A[i+3][j+1];
           
            // Save to 1st & 2nd column in B
            B[j][i] = t1;
            B[j][i+1] = t2;
            B[j][i+2] = t3;
            B[j][i+3] = t4;
            B[j+1][i] = t5;
            B[j+1][i+1] = t6;
            B[j+1][i+2] = t7;
            B[j+1][i+3] = t8;
           
            // Read 3rd & 4th row from A
            t1 = A[i][j+2];
            t2 = A[i+1][j+2];
            t3 = A[i+2][j+2];
            t4 = A[i+3][j+2];
            t5 = A[i][j+3];
            t6 = A[i+1][j+3];
            t7 = A[i+2][j+3];
            t8 = A[i+3][j+3];
           
            // Save to 3rd & 4th column in B
            B[j+2][i] = t1;
            B[j+2][i+1] = t2;
            B[j+2][i+2] = t3;
            B[j+2][i+3] = t4;
            B[j+3][i] = t5;
            B[j+3][i+1] = t6;
            B[j+3][i+2] = t7;
            B[j+3][i+3] = t8;
           
           
        }
    }
}*/
    }
}
/* 
 * is_transpose - This helper function checks if B is the transpose of
 *     A. You can check the correctness of your transpose by calling
 *     it before returning from the transpose function.
 */
int is_transpose(int M, int N, int A[N][M], int B[M][N])
{
    int i, j;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; ++j) {
            if (A[i][j] != B[j][i]) {
                return 0;
            }
        }
    }
    return 1;
}

